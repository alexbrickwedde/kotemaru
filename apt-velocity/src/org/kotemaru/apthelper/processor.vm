package ${packageName};

import java.io.PrintWriter;
import java.util.*;

import org.apache.velocity.Template;
import org.apache.velocity.VelocityContext;
import org.apache.velocity.app.Velocity;
import org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader;
import java.lang.annotation.Annotation;

import com.sun.mirror.apt.AnnotationProcessor;
import com.sun.mirror.apt.AnnotationProcessorEnvironment;
import com.sun.mirror.apt.Filer;
import com.sun.mirror.declaration.TypeDeclaration;
import org.kotemaru.apthelper.AptUtil;
import org.kotemaru.apthelper.annotation.*;

public class ${className} implements AnnotationProcessor
{
	protected AnnotationProcessorEnvironment environment;

	public ${className}(AnnotationProcessorEnvironment env) {
		this.environment = env;
	}

	@Override
	public void process() {
		for (TypeDeclaration classDecl : environment.getTypeDeclarations())  {
			try {
				processClass(classDecl);
			} catch (Exception e)  {
				e.printStackTrace();
			}
		}
	}

	protected void processClass(TypeDeclaration classDecl) throws Exception {
		Annotation anno = classDecl.getAnnotation(${masterClassDecl.qualifiedName}.class);
		if(anno == null) return;

		VelocityContext context = initVelocity();
		context.put("masterClassDecl", classDecl);
		context.put("annotation", anno);
		
		String templ  = "${annotation.template()}";
		String path   = "${annotation.path()}";
		String suffix = "${annotation.suffix()}";

		ProcessorGenerate pgAnno = ${masterClassDecl.qualifiedName}.class.getAnnotation(ProcessorGenerate.class);

		Object util   = pgAnno.util().newInstance();
		context.put("util", util);

		String orgPkgName = classDecl.getPackage().getQualifiedName();
		String pkgName = applyPkgPath(orgPkgName, path);
		if (orgPkgName.equals(pkgName) && suffix.length()==0) {
			suffix = "Impl";
		}
		
		String clsName = classDecl.getSimpleName()+suffix;

		if (templ.length()==0) {
			templ = classDecl.getSimpleName()+".vm";
		}
		templ = getResourceName(classDecl, templ);

		applyTemplate(context, pkgName, clsName, templ);
	}

	protected VelocityContext initVelocity() {
		Velocity.setProperty("resource.loader","class");
		Velocity.setProperty("class.resource.loader.class",
							ClasspathResourceLoader.class.getName());
		Velocity.init();
		VelocityContext context = new VelocityContext();
		return context;
	}
	
	protected String getResourceName(TypeDeclaration classDecl, String name) {
		if (name.startsWith("/")) return name;
		String pkg = classDecl.getPackage().getQualifiedName();
		return pkg.replace('.', '/') +'/'+name;
	}
	protected String applyPkgPath(String orgPkg, String path) {
		if (path.equals(".")) return orgPkg;
		if (path.startsWith("/")) {
			return path.replace('/', '.').substring(1);
		}

		path = orgPkg.replace('.', '/') +"/"+ path;
		ArrayList<String> list = new ArrayList<String>(Arrays.asList(path.split("/")));
		for (int i=0; i<list.size();) {
			String cur = list.get(i);
			if (cur.equals(".")) {
				list.remove(i);
			} else if (cur.equals("..")) {
				i--;
				list.remove(i);
				list.remove(i);
			} else {
				i++;
			}
		}

		StringBuffer sbuf = new StringBuffer();
		for (int i=0; i<list.size(); i++) {
			sbuf.append(".");
			sbuf.append(list.get(i));
		}
		return sbuf.toString().substring(1);
	}

	public void applyTemplate(VelocityContext context,
			String pkgName, String clsName, String templ) throws Exception {
		context.put("packageName", pkgName);
		context.put("className", clsName);

		Template template = Velocity.getTemplate(templ);
		Filer filer = environment.getFiler();
		PrintWriter writer = filer.createSourceFile(pkgName+'.'+clsName);
		template.merge(context, writer);
		writer.close();
	}


}
