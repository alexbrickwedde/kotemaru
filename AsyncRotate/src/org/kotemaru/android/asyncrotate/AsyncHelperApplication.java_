package org.kotemaru.android.asyncrotate;

import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;

import android.app.Activity;
import android.app.Application;
import android.os.Bundle;
import android.util.Log;

public class AsyncHelperApplication extends Application {
	private ActivityManager activityManager = new ActivityManager();

	@Override
	public void onCreate() {
		registerActivityLifecycleCallbacks(activityManager);
	}

	@Override
	public void onTerminate() {
	}

	public ActivityManager getActivityManager() {
		return activityManager;
	}
	public interface ActivityRestoreListener {
		public boolean onActivityRestore(Activity activity);
	}
	public class ActivityManager implements ActivityLifecycleCallbacks {
		public final String ACTIVITY_ID = "ACTIVITY_ID";
		private Integer nextActivityId = 0;
		private HashMap<String,Activity> aid2activity = new HashMap<String,Activity>();
		private HashMap<Activity,String> activity2aid = new HashMap<Activity,String>();
		private HashMap<String,LinkedList<ActivityRestoreListener>> aid2listener 
						= new HashMap<String,LinkedList<ActivityRestoreListener>>();

		public void addActivityRestoreListener(Activity activity, ActivityRestoreListener listener) {
			addActivityRestoreListener(activity2aid.get(activity), listener);
		}
		public synchronized void addActivityRestoreListener(String activityId, ActivityRestoreListener listener) {
			LinkedList<ActivityRestoreListener> list = aid2listener.get(activityId);
			if (list == null) {
				list = new LinkedList<ActivityRestoreListener>();
			}
			list.add(listener);
		}
		public synchronized void triggerActivityRestore(String aid, Activity activity) {
			LinkedList<ActivityRestoreListener> list = aid2listener.get(aid);
			if (list == null) return;
			Iterator<ActivityRestoreListener> ite = list.iterator();
			while (ite.hasNext()) {
				ActivityRestoreListener listener = ite.next();
				Log.e("DEBUG", "triggerActivityRestore: activity="+activity);
				boolean isNotMore = listener.onActivityRestore(activity);
				if (isNotMore) ite.remove();
			}
		}
		public synchronized Activity getActivity(String aid) {
			if (!aid2activity.containsKey(aid)) {
				throw new RuntimeException("Not managed activityId. "+aid);
			}
			return aid2activity.get(aid);
		}
		public synchronized String getActivityId(Activity activity) {
			String aid = activity2aid.get(activity);
			if (aid == null) {
				aid = (nextActivityId++).toString();
				aid2activity.put(aid, activity);
				activity2aid.put(activity, aid);
			}
			return aid;
		}
		
		@Override
		public void onActivityCreated(Activity activity, Bundle savedInstanceState) {
			Log.e("DEBUG", "activity="+activity);
			Log.e("DEBUG", "savedInstanceState="+savedInstanceState);
			if (savedInstanceState == null) return; // first
			
			String aid = savedInstanceState.getString(ACTIVITY_ID);
			Log.e("DEBUG", "aid="+aid);
			if (aid == null) return; // Not managed.
			
			synchronized (this) {
				aid2activity.put(aid, activity);
				activity2aid.put(activity, aid);
				triggerActivityRestore(aid, activity);
			}
		}
		
		@Override
		public void onActivitySaveInstanceState(Activity activity, Bundle outState) {
			String aid = activity2aid.get(activity);
			outState.putString(ACTIVITY_ID, aid);
		}

		@Override
		public synchronized void onActivityDestroyed(Activity activity) {
			String aid = activity2aid.get(activity);
			if (aid == null) return; // Not managed activity.
			// Note: 必須。Activityインスタンス開放の為。
			aid2activity.put(aid, null);
			activity2aid.remove(activity);
			
			try {Thread.sleep(6000);} catch (Exception e) { }
		}
		


		 
		@Override
		public void onActivityStarted(Activity activity) {
		}
		@Override
		public void onActivityResumed(Activity activity) {
		}
		@Override
		public void onActivityStopped(Activity activity) {
		}
		@Override
		public void onActivityPaused(Activity activity) {
		}

	}
}
