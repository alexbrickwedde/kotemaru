*** usb_descriptors.c.org	2014-02-21 12:22:37.621062000 +0900
--- usb_descriptors.c	2014-02-21 10:14:22.950614100 +0900
*************** ROM BYTE configDescriptor1[]={
*** 199,207 ****
--- 199,213 ----
      0,                      // Interface Number
      0,                      // Alternate Setting Number
      1,                      // Number of endpoints in this intf
+ #ifdef __FOR_ANDROID
+     HID_INTF,               // Class code
+     0,     // Subclass code
+     0,     // Protocol code
+ #else
      HID_INTF,               // Class code	'0x03'
      BOOT_INTF_SUBCLASS,     // Subclass code	'0x01'
      HID_PROTOCOL_MOUSE,     // Protocol code	'0x02'
+ #endif
      0,                      // Interface string index
  
      /* HID Class-Specific Descriptor */
*************** ROM BYTE configDescriptor1[]={
*** 211,217 ****
--- 217,227 ----
      0x00,                   // Country Code (0x00 for Not supported)
      HID_NUM_OF_DSC,         // Number of class descriptors, see usbcfg.h
      DSC_RPT,                // Report descriptor type		'0x22'
+ #ifdef __FOR_ANDROID
+     DESC_CONFIG_WORD(HID_RPT04_SIZE),
+ #else
      DESC_CONFIG_WORD(HID_RPT01_SIZE),   //sizeof(hid_rpt01),      // Size of the report descriptor
+ #endif
      
      /* Endpoint Descriptor */
      0x07,/*sizeof(USB_EP_DSC)*/
*************** ROM BYTE configDescriptor1[]={
*** 229,237 ****
--- 239,253 ----
      1,                      // Interface Number
      0,                      // Alternate Setting Number
      1,                      // Number of endpoints in this intf
+ #ifdef __FOR_ANDROID
+     HID_INTF,               // Class code
+     0,     // Subclass code
+     0,     // Protocol code
+ #else
      HID_INTF,               // Class code
      BOOT_INTF_SUBCLASS,     // Subclass code	'0x01'
      HID_PROTOCOL_NONE,     // Protocol code	'0x00'
+ #endif
      0,                      // Interface string index
  
      /* HID Class-Specific Descriptor */
*************** ROM BYTE configDescriptor1[]={
*** 241,247 ****
--- 257,267 ----
      0x00,                   // Country Code (0x00 for Not supported)
      HID_NUM_OF_DSC,         // Number of class descriptors, see usbcfg.h
      DSC_RPT,                // Report descriptor type
+ #ifdef __FOR_ANDROID
+     DESC_CONFIG_WORD(HID_RPT04_SIZE),
+ #else
      DESC_CONFIG_WORD(HID_RPT02_SIZE),   //sizeof(hid_rpt02),      // Size of the report descriptor
+ #endif
      
      /* Endpoint Descriptor */
      0x07,/*sizeof(USB_EP_DSC)*/
*************** ROM BYTE configDescriptor1[]={
*** 258,266 ****
--- 278,292 ----
      2,                      // Interface Number
      0,                      // Alternate Setting Number
      2,                      // Number of endpoints in this intf
+ #ifdef __FOR_ANDROID
+     HID_INTF,               // Class code
+     0,     // Subclass code
+     0,     // Protocol code
+ #else
      HID_INTF,               // Class code
      BOOT_INTF_SUBCLASS,     // Subclass code
      HID_PROTOCOL_KEYBOARD,     // Protocol code '0x01'
+ #endif
      0,                      // Interface string index
  
      /* HID Class-Specific Descriptor */
*************** ROM BYTE configDescriptor1[]={
*** 270,277 ****
      0x00,                   // Country Code (0x00 for Not supported)
      HID_NUM_OF_DSC,         // Number of class descriptors, see usbcfg.h
      DSC_RPT,                // Report descriptor type
      DESC_CONFIG_WORD(HID_RPT03_SIZE),   //sizeof(hid_rpt03),      // Size of the report descriptor
!     
      /* Endpoint Descriptor */
      0x07,/*sizeof(USB_EP_DSC)*/
      USB_DESCRIPTOR_ENDPOINT,    //Endpoint Descriptor
--- 296,307 ----
      0x00,                   // Country Code (0x00 for Not supported)
      HID_NUM_OF_DSC,         // Number of class descriptors, see usbcfg.h
      DSC_RPT,                // Report descriptor type
+ #ifdef __FOR_ANDROID
+     DESC_CONFIG_WORD(HID_RPT04_SIZE),
+ #else	
      DESC_CONFIG_WORD(HID_RPT03_SIZE),   //sizeof(hid_rpt03),      // Size of the report descriptor
! #endif
! 
      /* Endpoint Descriptor */
      0x07,/*sizeof(USB_EP_DSC)*/
      USB_DESCRIPTOR_ENDPOINT,    //Endpoint Descriptor
*************** ROM BYTE configDescriptor1[]={
*** 326,332 ****
      0x08                        //Interval
  };
  
! 
  ROM struct{BYTE report[HID_RPT01_SIZE];}hid_rpt01={{
    0x05,0x01,        //USAGE_PAGE (Generic Desktop)
    0x09,0x02,        //Usage (Mouse)
--- 356,380 ----
      0x08                        //Interval
  };
  
! #ifdef __FOR_ANDROID
! ROM struct{BYTE report[HID_RPT04_SIZE];}hid_rpt01={
! {
!     0x06, 0x00, 0xFF,       // Usage Page = 0xFF00 (Vendor Defined Page 1)
!     0x09, 0x01,             // Usage (Vendor Usage 1)
!     0xA1, 0x01,             // Collection (Application)
!     0x19, 0x01,             //      Usage Minimum 
!     0x29, 0x40,             //      Usage Maximum 	//64 input usages total (0x01 to 0x40)
!     0x15, 0x00,             //      Logical Minimum (data bytes in the report may have minimum value = 0x00)
!     0x26, 0xFF, 0x00, 	  	//      Logical Maximum (data bytes in the report may have maximum value = 0x00FF = unsigned 255)
!     0x75, 0x08,             //      Report Size: 8-bit field size
!     0x95, 0x40,             //      Report Count: Make sixty-four 8-bit fields (the next time the parser hits an "Input", "Output", or "Feature" item)
!     0x81, 0x00,             //      Input (Data, Array, Abs): Instantiates input packet fields based on the above report size, count, logical min/max, and usage.
!     0x19, 0x01,             //      Usage Minimum 
!     0x29, 0x40,             //      Usage Maximum 	//64 output usages total (0x01 to 0x40)
!     0x91, 0x00,             //      Output (Data, Array, Abs): Instantiates output packet fields.  Uses same report size and count as "Input" fields, since nothing new/different was specified to the parser since the "Input" item.
!     0xC0}                   // End Collection
! };
! #else
  ROM struct{BYTE report[HID_RPT01_SIZE];}hid_rpt01={{
    0x05,0x01,        //USAGE_PAGE (Generic Desktop)
    0x09,0x02,        //Usage (Mouse)
*************** ROM struct{BYTE report[HID_RPT01_SIZE];}
*** 356,364 ****
    0xC0, 0xC0,  // End Collection , End Collection
  }
  };
  
  //ここから上がマウス,下がボリュームコントローラ（コンシューマデバイス）
! 
  ROM struct{BYTE report[HID_RPT02_SIZE];}hid_rpt02={{
      0x05, 0x0c,                    // USAGE_PAGE (Consumer Devices)
      0x09, 0x01,                    // USAGE (Consumer Control)
--- 404,431 ----
    0xC0, 0xC0,  // End Collection , End Collection
  }
  };
+ #endif
  
  //ここから上がマウス,下がボリュームコントローラ（コンシューマデバイス）
! #ifdef __FOR_ANDROID
! ROM struct{BYTE report[HID_RPT04_SIZE];}hid_rpt02={
! {
!     0x06, 0x00, 0xFF,       // Usage Page = 0xFF00 (Vendor Defined Page 1)
!     0x09, 0x01,             // Usage (Vendor Usage 1)
!     0xA1, 0x01,             // Collection (Application)
!     0x19, 0x01,             //      Usage Minimum 
!     0x29, 0x40,             //      Usage Maximum 	//64 input usages total (0x01 to 0x40)
!     0x15, 0x00,             //      Logical Minimum (data bytes in the report may have minimum value = 0x00)
!     0x26, 0xFF, 0x00, 	  	//      Logical Maximum (data bytes in the report may have maximum value = 0x00FF = unsigned 255)
!     0x75, 0x08,             //      Report Size: 8-bit field size
!     0x95, 0x40,             //      Report Count: Make sixty-four 8-bit fields (the next time the parser hits an "Input", "Output", or "Feature" item)
!     0x81, 0x00,             //      Input (Data, Array, Abs): Instantiates input packet fields based on the above report size, count, logical min/max, and usage.
!     0x19, 0x01,             //      Usage Minimum 
!     0x29, 0x40,             //      Usage Maximum 	//64 output usages total (0x01 to 0x40)
!     0x91, 0x00,             //      Output (Data, Array, Abs): Instantiates output packet fields.  Uses same report size and count as "Input" fields, since nothing new/different was specified to the parser since the "Input" item.
!     0xC0}                   // End Collection
! };
! #else
  ROM struct{BYTE report[HID_RPT02_SIZE];}hid_rpt02={{
      0x05, 0x0c,                    // USAGE_PAGE (Consumer Devices)
      0x09, 0x01,                    // USAGE (Consumer Control)
*************** ROM struct{BYTE report[HID_RPT02_SIZE];}
*** 378,386 ****
      0xc0                           // END_COLLECTION
      }
  };
  
  //ここから下がキーボード
! 
  ROM struct{BYTE report[HID_RPT03_SIZE];}hid_rpt03={{
     0x05, 0x01,                    // USAGE_PAGE (Generic Desktop)
      0x09, 0x06,                    // USAGE (Keyboard)
--- 445,472 ----
      0xc0                           // END_COLLECTION
      }
  };
+ #endif
  
  //ここから下がキーボード
! #ifdef __FOR_ANDROID
! ROM struct{BYTE report[HID_RPT04_SIZE];}hid_rpt03={
! {
!     0x06, 0x00, 0xFF,       // Usage Page = 0xFF00 (Vendor Defined Page 1)
!     0x09, 0x01,             // Usage (Vendor Usage 1)
!     0xA1, 0x01,             // Collection (Application)
!     0x19, 0x01,             //      Usage Minimum 
!     0x29, 0x40,             //      Usage Maximum 	//64 input usages total (0x01 to 0x40)
!     0x15, 0x00,             //      Logical Minimum (data bytes in the report may have minimum value = 0x00)
!     0x26, 0xFF, 0x00, 	  	//      Logical Maximum (data bytes in the report may have maximum value = 0x00FF = unsigned 255)
!     0x75, 0x08,             //      Report Size: 8-bit field size
!     0x95, 0x40,             //      Report Count: Make sixty-four 8-bit fields (the next time the parser hits an "Input", "Output", or "Feature" item)
!     0x81, 0x00,             //      Input (Data, Array, Abs): Instantiates input packet fields based on the above report size, count, logical min/max, and usage.
!     0x19, 0x01,             //      Usage Minimum 
!     0x29, 0x40,             //      Usage Maximum 	//64 output usages total (0x01 to 0x40)
!     0x91, 0x00,             //      Output (Data, Array, Abs): Instantiates output packet fields.  Uses same report size and count as "Input" fields, since nothing new/different was specified to the parser since the "Input" item.
!     0xC0}                   // End Collection
! };
! #else
  ROM struct{BYTE report[HID_RPT03_SIZE];}hid_rpt03={{
     0x05, 0x01,                    // USAGE_PAGE (Generic Desktop)
      0x09, 0x06,                    // USAGE (Keyboard)
*************** ROM struct{BYTE report[HID_RPT03_SIZE];}
*** 416,421 ****
--- 502,508 ----
      0xc0                          // End Collection
      }
  };
+ #endif
  
  //Class specific descriptor - HID 
  ROM struct{BYTE report[HID_RPT04_SIZE];}hid_rpt04={
