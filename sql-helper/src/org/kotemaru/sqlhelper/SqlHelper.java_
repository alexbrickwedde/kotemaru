package jp.co.omron.gweb.tridionbatch.helper;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.xml.transform.TransformerException;

import org.apache.log4j.Logger;
import org.w3c.dom.DOMException;
import org.w3c.dom.Document;

/**
 * JDBC補助クラス。
 * <li>- PreparedStatementの ? パラメータを ?{name} で名前指定する機能を追加。
 * <li>- DataMap[]を指定してXMLデータからまとめてパラメータ設定もできる。
 * <li>- SQL+パラメータ値のログ機能もある。
 * @author inou
 *
 */
public class SqlHelper {
	public static final Logger LOG = Logger.getLogger( SqlHelper.class );

	private static final String PATT = "[?][{][a-zA-Z0-9_]+[}]";

	private String originSql;
	private String correctSql;
	private Object[] params;
	private Boolean isIgnoreInvalidBinding = false;

	private PreparedStatement stmt;
	private HashMap<String,List<Integer>> map = new HashMap<String,List<Integer>>();;

	/**
	 * コンストラクタ。
	 * @param db DB接続
	 * @param sql 拡張SQL
	 * @throws SQLException
	 */
	public SqlHelper(Connection db, String sql) throws SQLException {
		this.originSql = sql;
		this.correctSql = init(sql);
		this.stmt = db.prepareStatement(this.correctSql);
	}
	/**
	 * 初期化処理。
	 * <li>拡張形式のSQLをPrepared形式のSQLに変換する。
	 * <li>同時に変数名とPreparedのindexとのマップを設定する。
	 * @param sql 拡張形式のSQL
	 * @return Prepared形式のSQL
	 */
	private String init(String sql) {
		Pattern patt = Pattern.compile(PATT);
		Matcher m = patt.matcher(sql);

		int idx = 1;
		while (m.find()) {
			String name = sql.substring(m.start()+2, m.end()-1);
			List<Integer> items = this.map.get(name);
			if (items == null) {
				items = new ArrayList<Integer>(2);
				this.map.put(name, items);
			}
			items.add(idx++);
		}
		this.params = new Object[idx-1];

		return sql.replaceAll(PATT, "?");
	}

	/**
	 * 無効な名前への設定を無視するか？
	 * @return
	 */
	public Boolean isIgnoreInvalidBinding() {
		return isIgnoreInvalidBinding;
	}
	/**
	 * 無効な名前への設定を無視するか設定する。デフォルトはfalse。
	 * @param b true=無視する
	 */
	public void setIgnoreInvalidBinding(Boolean b) {
		this.isIgnoreInvalidBinding = b;
	}

	/**
	 * SQLの実行
	 * @return カウント
	 * @throws SQLException
	 */
	public int execute() throws SQLException {
		logSql("exec_SQL:\n");
		return  this.stmt.executeUpdate();
	}

	/**
	 * クエリの実行
	 * @return 結果
	 * @throws SQLException
	 */
	public ResultSet query() throws SQLException {
		logSql("query_SQL:\n");
		return  this.stmt.executeQuery();
	}

	/**
	 * SQLログ出力。
	 * @param msg メッセージ
	 */
	private void logSql(String msg) {
		if (!LOG.isInfoEnabled()) return;
		LOG.info(msg+this.correctSql+"\n"+Arrays.asList(this.params));
	}

	/**
	 * ステートメントを閉じる。
	 * @throws SQLException
	 */
	public void close() throws SQLException {
		this.stmt.close();
	}

	/**
	 * ステートメントを取得。
	 * @return
	 */
	public PreparedStatement getStatement() {
		return this.stmt;
	}
	/**
	 * パラメータ名->indexのマップ。
	 * @return
	 */
	public Map<String,List<Integer>> getMap() {
		return this.map;
	}

	/**
	 * パラメータの設定。
	 * @param name 拡張SQLのパラメータ名
	 * @param val 設定値
	 * @param type 設定型（java.sql.Types）
	 * @throws SQLException
	 */
	public void setObject(String name, Object val, int type) throws SQLException {
		List<Integer> items = this.map.get(name);
		if (items == null) {
			String msg = "Not found "+name+" in sql.\n"+originSql;
			if (isIgnoreInvalidBinding) {
				LOG.warn(msg);
				return;
			} else {
				throw new RuntimeException(msg);
			}
		}
		for (Integer idx : items) {
			this.stmt.setObject(idx, val, type);
			this.params[idx-1] = val;
		}
	}


	/**
	 * マッピングデータをPreparedに設定する。
	 * <li>documentが指定されていればvalueをxpathとして評価し結果を設定する。
	 * <li>
	 * @param mapping マッピングデータ
	 * @throws SQLException
	 * @throws DOMException
	 * @throws TransformerException XPathにエラー
	 */
	public void bind(DataMap[] mapping) throws SQLException, DOMException, TransformerException {
		for (int i=0; i<mapping.length; i++) {
			DataMap dm = mapping[i];
			Document doc = dm.getDocument();
			if (doc != null) {
				String val = TransHelper.doXpath(doc, dm.getXpath());
				setObject(dm.getDbname(), val, dm.getDbtype());
			} else {
				setObject(dm.getDbname(), dm.getValue(), dm.getDbtype());
			}
		}
	}



	//-----------------------------------------------------------------------------------------
	// static utils

	/**
	 * マッピングからINSERTの項目名用のリストを生成する。
	 * @param mapping マッピング
	 * @return Ex."A,B,…"
	 */
	public static String getNameList(DataMap[] mapping)
			throws SQLException
	{
		StringBuffer sbuf = new StringBuffer();
		for (int i = 0; i < mapping.length; i++) {
			DataMap dm = mapping[i];
			sbuf.append(dm.getDbname()).append(",");
		}
		sbuf.setLength(sbuf.length()-1);
		return sbuf.toString();
	}

	/**
	 * マッピングからVALUES用の変数参照のリストを生成する。
	 * @param mapping マッピング
	 * @return Ex."?{A},?{B},…"
	 */
	public static String getParamList(DataMap[] mapping)
			throws SQLException
	{
		StringBuffer sbuf = new StringBuffer();
		for (int i = 0; i < mapping.length; i++) {
			DataMap dm = mapping[i];
			sbuf.append("?{").append(dm.getDbname()).append("},");
		}
		sbuf.setLength(sbuf.length()-1);
		return sbuf.toString();
	}

	/**
	 * マッピングからUPDATE用の代入文のリストを生成する。
	 * @param mapping マッピング
	 * @return Ex."A=?{A},B=?{B},…"
	 */
	public static String getSetList(DataMap[] mapping) {
		StringBuffer sbuf = new StringBuffer();
		for (int i = 0; i < mapping.length; i++) {
			DataMap dm = mapping[i];
			sbuf.append(dm.getDbname()).append("=?{").append(dm.getDbname()).append("},");
		}
		sbuf.setLength(sbuf.length()-1);
		return sbuf.toString();
	}

}