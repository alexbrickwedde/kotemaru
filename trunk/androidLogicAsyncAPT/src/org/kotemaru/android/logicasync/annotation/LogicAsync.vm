//  Generated stub.
#*
定義済変数
${packageName}      : このクラスのパッケージ名
${className}        : このクラスのクラス名
${masterClassDecl}  : アノテーションの定義された元クラスの TypeDeclaration
${annotation}       : 元クラスに定義されたアノテーション
${helper}           : ユーザ定義の補助クラスインスタンス
*#

package ${packageName};
import org.kotemaru.android.logicasync.*;

public class ${className}
{
	private static final long serialVersionUID = 1L;
	
	private final TaskThread thread = new TaskThread();
	private final ${masterClassDecl.simpleName} origin;

	public ${className}( ${masterClassDecl.simpleName} origin ) {
		this.origin = origin;
	}
	public final void close() {
		thread.stop();
	}

## 元クラスのメソッド一覧を取得
#foreach( $method in $masterClassDecl.methods )
	## メソッド用の補助インスタンスを取得
	#set($mh = ${helper.getStateHelper($method)})

## フィールドの @State アノテーションをチェック
#if( $mh.isTask() )
	public ${method.returnType} ${method.simpleName}(${mh.params}) {
		Task task = new Task(${mh.getOptions()}, "${method.simpleName}", ${mh.arguments}){
			private static final long serialVersionUID = 1L;
			@Override public void run() {
				origin.${method.simpleName}(${mh.arguments});
			}
		};
	#if( $mh.hasOption("UI") )
		task.setThreadType(Task.UI);
	#end
	#if( $mh.hasOption("parallel") )
		task.setThreadType(Task.PARALLEL);
		TaskThread subThread = new TaskThread();
		subThread.addTask(task);
		subThread.autoStop();
	#else
		thread.addTask(task);
	#end
	}
#end

#end



}
