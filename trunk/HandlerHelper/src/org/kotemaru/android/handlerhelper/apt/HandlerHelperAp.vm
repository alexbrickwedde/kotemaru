//  Generated stub.
#*
定義済変数
${packageName}      : このクラスのパッケージ名
${className}        : このクラスのクラス名
${typeElement}      : アノテーションの定義された元クラスの TypeElement
${annotation}       : 元クラスに定義されたアノテーション(HandlerHelper)
${classDecl}        : ClassDeclインスタンス
*#

package ${packageName};

import org.kotemaru.android.handlerhelper.rt.Runner;
import android.util.Log;
import android.os.Handler;
import android.os.Looper;

public class ${className} 
#foreach( $interface in $classDecl.impl()) )
			, ${interface.name}
#end
{
	private static final String TAG = "${className}";
	private static final String TRACE_TAG = "HH-Trace";
	private static final boolean IS_TRACE = Log.isLoggable(TRACE_TAG, Log.VERBOSE);

	public ThreadLocal<Runner> mCurrentRunner = new ThreadLocal<Runner>();
	public final ${typeElement.simpleName} mOrigin;
	public final Handler mWkHandler;
	public final Handler mUiHadler ;

	public ${className}(${typeElement.simpleName} origin, Handler uiHandler , Handler handler) {
		this.mOrigin = origin;
		this.mUiHadler = uiHandler;
		this.mWkHandler = handler;
	}
	public ${className}(${typeElement.simpleName} origin, Looper looper) {
		this(origin,
			new Handler(Looper.getMainLooper()),
			new Handler(looper)
		);
	}

## 例外ハンドラメソッド
#set($excepMethod = ${classDecl.getExceptionMethod()})

## 元クラスのメソッド一覧を取得
#foreach( $method in $classDecl.getMethods() )
	public ${method.elem.returnType} ${method.name}(${method.params}) {
		Runner runner = new Runner(){
			@Override public void run() {
				mCurrentRunner.set(this);
				try {
					mOrigin.${method.name}(${method.arguments});
				} catch (Throwable t) {
					Log.e(TAG, "${method.name} in handler",t);
#if( $excepMethod )
					mOrigin.${excepMethod.name}(t);
#end
				}
			}
		};
		if (IS_TRACE) {
			Log.v(TRACE_TAG, runner.toTraceString(mCurrentRunner.get()));
		}
#if ($method.isThread("UI")) 
		Handler handler = mUiHadler;
#else
		Handler handler = mWkHandler;
#end
#if( $method.delay == 0 )
		handler.post(runner);
#else
		handler.postDelayed(runner, ${method.delay});
#end
	}
#end
}
